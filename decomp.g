# Generators of our group
gens := [(1,2)];

# The group we are taking representations of
G := Group(gens);

# The base field of our vector spaces. Must be some subfield of the complex
# numbers, since we take conjugates sometimes. We just use the cyclotomic
# numbers, since this is the closest to C we can actually get in GAP.
F := Cyclotomics;

# Dimension of the vector space we want
n := 2;

# This is the vector space our linear maps will act on.
V := F^n;

# Images of the generators of G in GL(V) (matrix form)
images := [ [[-1, 0], [0, -1]] ];

# We can't actually concretely have GL(V) in GAP, so we limit ourselves to the
# subgroup generated by the images
H := Group(images);

# The representation we will decompose
rho := GroupHomomorphismByImages(G, H, gens, images);

# The full list of irreps W_i of G over F
irreps := IrreducibleRepresentations(G, F);

# The characters chi_i of each irrep W_i
chars := List(irreps,
              irrep -> GroupHomomorphismByFunction(G, F,
                                                   g -> Trace(Image(irrep, g))));

# Given a character chi_i, calculate the projection onto V_i using Theorem 8
# This is given as a matrix
char_to_proj := function(char)
    local degree;

    # The degree n_i of char
    degree := Image(char, One(G));
    return (degree/Order(G)) * Sum(G,
      t -> ComplexConjugate(Image(char, t)) * Image(rho, t));
end;

# The list of the p_i in matrix form
canonical_projections := List(chars, char_to_proj);

# Calculates p(V) for p a linear map (given as a matrix in the standard basis)
matrix_image := p -> VectorSpace(F, List(Basis(V), v -> p * v));

# The list of the V_i
canonical_summands := List(canonical_projections, p -> matrix_image(p));
